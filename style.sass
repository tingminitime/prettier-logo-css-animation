$red: #ea5e5e
$yellow: #f7ba3e
$blue: #56b3b4
$purple: #bf85bf
$background: #1a2b34
$gray: #465862
$unit: 10px
$size: 2

@function mapCollect($maps...)
  $collection: ()
  @each $map in $maps
    $collection: map-merge($collection, $map)
  @return $collection

// *, *::before, *::after
  // outline: 1px solid pink

// *:has(:hover)
//   outline: 1px solid pink

body
  margin: 0
  background: $background
  display: flex
  justify-content: center
  align-items: center
  height: 100dvh

.container
  width: 600px
  display: flex
  flex-direction: column
  gap: $unit
  margin: 0 auto
  position: relative
  overflow: hidden
  // &:hover
  //   &::before
  //     content: ''
  //     width: 50%
  //     height: 100%
  //     position: absolute
  //     opacity: .5
  //     background: red

@keyframes row-init
  0%
    opacity: 0
  50%
    opacity: 1
  100%
    opacity: 1
    translate: 0

@keyframes row-left-to-right
  20%
    translate: 0
  60%
    translate: 0
  80%
    translate: -100%
  100%
    translate: -100%

@keyframes row-right-to-left
  20%
    translate: 0
  60%
    translate: 0
  80%
    translate: 100%
  100%
    translate: 100%

.row
  height: $unit
  display: flex
  justify-content: center
  gap: $unit
  animation-duration: 1s, 5s
  animation-fill-mode: forwards, both
  animation-iteration-count: 1, infinite
  position: relative
  opacity: 0

.cell-group
  display: flex
  justify-content: center
  gap: $unit
  height: $unit
  position: absolute
  top: 0

.row:nth-child(odd)
  animation-name: row-init, row-left-to-right
  .cell-group:last-child
    right: -50%
    translate: 50%

.row:nth-child(even)
  animation-name: row-init, row-right-to-left
  .cell-group:last-child
    left: -50%
    translate: -50%

.cell
  height: 100%
  width: calc($size * $unit)
  background-color: $gray
  border-radius: 9999px

.cell
  &.blue
    background-color: $blue
  &.red
    background-color: $red
  &.yellow
    background-color: $yellow
  &.purple
    background-color: $purple

$row-1: (1: (3, 2, 7, 6, 10, 6))
$row-2: (2: (4, 3, 3, 14, 6, 4, 6))
$row-3: (3: (3, 4, 4, 12, 4, 6))
$row-4: (4: (4, 4, 6, 8, 7, 2, 8, 8))
$row-5: (5: (6, 2, 4, 2, 6, 6, 6, 2, 14))
$row-6: (6: (7, 6, 6, 6, 6, 14))
$row-7: (7: (8, 7, 2, 3, 5, 9, 10, 2, 6))
$row-8: (8: (6, 6, 4, 6, 6, 4, 7, 12)) // 24 31
$row-9: (9: (6, 8, 2, 12, 6, 8, 4))
$row-10: (10: (5, 2, 3, 7, 10, 14))
$row-11: (11: (8, 3, 3, 8, 12))
$row-12: (12: (5, 3, 2, 7, 14, 10))
$row-13: (13: (8, 12, 9, 6))

$sizeMap: mapCollect($row-1, $row-2, $row-3, $row-4, $row-5, $row-6, $row-7, $row-8, $row-9, $row-10, $row-11, $row-12, $row-13)

@each $key, $sizeList in $sizeMap
  .row:nth-child(#{$key})
    animation-delay: $key * 100ms + 500ms, $key * 100ms + 500ms
    @for $i from 1 through length($sizeList)
      .cell:nth-child(#{$i})
        width: nth($sizeList, $i) * $unit

$row-offset: (1: 150px, 2: 100px, 3: 200px, 4: 100px, 5: 200px, 6: 50px, 7: 150px, 8: 100px, 9: 50px, 10: 150px, 11: 150px, 12: 250px, 13: 250px)

@each $key, $offset in $row-offset
  @if $key % 2 == 0
    .row:nth-child(#{$key})
      translate: $offset * -1
  @else
    .row:nth-child(#{$key})
      translate: $offset * 1
